#!/bin/bash

# Filename: sysed
# Autor: Michael Mair-Keimberger (m DOT mairkeimberger AT gmail DOT com)
# Date: 081114

# Copyright (C) 2014  Michael Mair-Keimberger
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Discription:
# sysed - for editing root lvm systems like:
#	* cloneing
#	* backup/restore
#	* deleting

# TODO:
#- clone with settings size (resize?) (-s size)
#- backup/restore/delete multiple
#- systemd support

# programs
LVCREATE="/sbin/lvcreate"
LVREMOVE="/sbin/lvremove"
LVRENAME="/sbin/lvrename"
LVS="/sbin/lvs"

# default vars
VG="vg0"
DEVLV="/dev/${VG}/"
GRUB_CFG="/boot/grub/grub.cfg"
LV_FILTER="sys_"
MODE=""
FS=""
CALCULATE_SIZE=""

DELETE_FILE=0
UPDATE_FILE=0
USE_NAME=0

# save mode, ask before really delete something
SAVE=1

mode_list() {
	echo "Actual Running SYS:"
	get_actual_lv
	echo
	echo "Full list:"
	lvs | egrep -i -v "${LV_FILTER}|LV"
	echo
	if ((${VERBOSE_OUTPUT})); then

		local oldifs=${IFS}
		local mountpoint="/tmp/mp-${RANDOM}"
		mkdir -p "${mountpoint}"

		IFS=","

		for lv in ${LIST_MODULES}; do
			mount "${DEVLV}/${lv}" ${mountpoint}
			ARCH=`file ${mountpoint}/bin/bash | cut -d' ' -f 3`
			echo -e "* ${lv} (${ARCH})"
			du -sh ${mountpoint}/lib/modules/*|sed "s|${mountpoint}||g"
			echo
			umount ${mountpoint}
		done

		rm -rf ${mountpoint}
	fi
	IFS=$oldifs
}

edit_modify() {
	local mountpoint="/tmp/mp-${RANDOM}"
	mkdir -p "${mountpoint}"
	local oldifs=${IFS}

	((DELETE_FILE)) && local doing="Removing"
	((UPDATE_FILE)) && local doing="Replacing"

	read -p "`echo -e "${doing} File(s): \"${EDIT_FILE}\" from:\n$(echo ${LV}|tr ',' '\n')\nContinue? (Ctrl + C for Cancel)"`"
	echo -n "Proceeding"
	IFS=","
	for l in ${LV}; do
		echo -n "."
		mount "${DEVLV}/${l}" ${mountpoint}
		((DELETE_FILE)) && rm -rf "${mountpoint}/${EDIT_FILE}"
		((UPDATE_FILE)) && cp -r ${EDIT_FILE} "${mountpoint}/${EDIT_FILE}"
		umount ${mountpoint}
	done
	IFS=${oldifs}
	echo "Done!"

	rm -rf ${mountpoint}
}

edit_rename() {
	${LVRENAME} "${DEVLV}/${LV}" "${DEVLV}/${NAME}"
	sed -i "s/${LV}/${NAME}/g" ${GRUB_CFG}
}

mode_backup() {
	local snapshotsize=10G
	if ((${USE_ALTERNATE})); then
		test_filename "${SAVE_PATH}/${SAVE_NAME}.gz"
	else
		test_filename "${SAVE_PATH}/${SAVE_NAME}.tar.gz"
	fi

	# create snapshot
	${LVCREATE} --size ${snapshotsize} --snapshot --name ${LV}-snapshot "${DEVLV}/${LV}"

	echo -n "Backuping... "
	if ((${USE_ALTERNATE})); then
		dd if=${DEVLV}/${LV}-snapshot bs=4k conv=sync,noerror 2>/dev/null | pigz -c > ${SAVE_PATH}/${SAVE_NAME}.gz
	else
		local mountpoint="/tmp/mp-${RANDOM}"
		mkdir -p "${mountpoint}"
		mount ${DEVLV}/${LV}-snapshot ${mountpoint}

		tar --create --use-compress-prog=pigz --same-permissions \
		--file ${SAVE_PATH}/${SAVE_NAME}.tar.gz -C ${mountpoint} --exclude="lost+found" .

		umount ${mountpoint}
		rm -rf ${mountpoint}
	fi
	# delete snapshot
	${LVREMOVE} --force ${DEVLV}/${LV}-snapshot
}

mode_restore() {
	if ((${CALCULATE_SIZE})); then
		echo -n "Determine original lv size... "
		local new_lv_size="`pigz -lt ${RESTORE_FILE} | grep ${RESTORE_NAME} | cut -d' ' -f 2`b"
		echo "${new_lv_size}"
	else
		local new_lv_size=${SIZE}
	fi

	${LVCREATE} --size ${new_lv_size} --name "${NAME}" "${VG}"
	echo -n "Restoring..."

	if ((${CALCULATE_SIZE})); then
		pigz -d ${RESTORE_FILE} | dd of="${DEVLV}/${NAME}"
	else
		mkfs -t ${FS} -q ${DEVLV}/${NAME}
		local mountpoint="/tmp/mp-${RANDOM}"
		mkdir -p "${mountpoint}"
		mount ${DEVLV}/${NAME} ${mountpoint}

		tar xvpfz ${RESTORE_FILE} -C "${mountpoint}"

		umount ${mountpoint}
		rm -rf ${mountpoint}
	fi
}

mode_delete() {
	if ((${SAVE})); then
		echo "*** WARNING ***"
		if ((${UNINSTALL_GRUB})); then
			echo "Following Grub Entry will be removed:"
			echo
			if ! `cat ${GRUB_CFG} |grep ${LV} > /dev/null`; then
				echo "No Grub Entry found! Nothing gonna be removed!"
				UNINSTALL_GRUB=0
			else
				cat ${GRUB_CFG} | grep -A2 -B1 ${LV}
			fi
			echo
		fi
		${LVREMOVE} "${DEVLV}/${LV}"
		(($?)) && exit 1
	else
		${LVREMOVE} --force "${DEVLV}/${LV}"
	fi

	if ((${UNINSTALL_GRUB})); then
		# insert beginning of removal
		awk -v pat="${LV}" '{a[NR]=$0;}END{for(i=1;i<=NR;i++){if(a[i+1] ~ pat ){print "<!-- BOF CLEAN -->\n"a[i];}else{print a[i];}}}' ${GRUB_CFG} > /tmp/grub.cfg.tmp
		# insert end of removal
		sed -i '/${LV}/{N;N;s/$/\n<!-- EOF CLEAN -->/}' /tmp/grub.cfg.tmp
		# remove entry
		sed -i '/<!-- BOF CLEAN -->/,/<!-- EOF CLEAN -->/d' /tmp/grub.cfg.tmp
		mv /tmp/grub.cfg.tmp /boot/grub/grub.cfg
	fi
		
}

mode_clone() {
	local snapshotsize=10G
	local copy_size=`${LVS} ${DEVLV}/${LV} -o LV_SIZE --noheadings --units b --nosuffix`

	# create new lv
	${LVCREATE} --size ${copy_size}b --name "${NAME}" "${VG}"

	# create snapshot
	${LVCREATE} --size ${snapshotsize} --snapshot --name ${LV}-snapshot "${DEVLV}/${LV}"
	echo "Copy..."
	if ((${USE_ALTERNATE})); then
		dd if=${DEVLV}/${LV}-snapshot bs=4k conv=sync,noerror of=${DEVLV}/${NAME}
	else
		# default: use original fs
		mkfs -t ${FS} -q ${DEVLV}/${NAME}

		local lv_org="/tmp/$RANDOM"
		local lv_copy="/tmp/$RANDOM"
		mkdir -p ${lv_org} ${lv_copy}

		mount -o ro ${DEVLV}/${LV}-snapshot ${lv_org}
		mount ${DEVLV}/${NAME} ${lv_copy}

		rsync -aAX --info=progress2 --exclude={"/tmp/*","/lost+found","/usr/portage/*"} /${lv_org}/* /${lv_copy}/
		mkdir -p ${lv_copy}/usr/portage/{distfiles,packages}

		umount ${lv_copy}
		umount ${lv_org}

		rm -rf ${lv_org} ${lv_copy}
	fi
	# delete snapshot
	${LVREMOVE} --force "${DEVLV}/${LV}-snapshot"

	if ((${INSTALL_GRUB})); then
		local grub_name=`echo ${NAME}|tr '_' ' '`
		# use kernel of the original sys
		local grub_kernel=`cat ${GRUB_CFG} | grep -m1 ${LV} | cut -d ' ' -f 2`
		echo -e "menuentry '${grub_name}' {\n\tlinux ${grub_kernel} consoleblank=0 lvm=${NAME}\n\tinitrd /initrd.cpio.gz\n}" >> ${GRUB_CFG}
	fi
}

usage() {
	echo -e "* Cloning"
	echo -e "$0 -c|--clone[LV] [-n] ([-i] (( [-a] || [-f] [-s] )) )"
	echo -e " -n|--name [NAME]\tname of the new sys (REQUIRED)"
	echo -e " -i|--install\t\tcreate grub entry"
	echo -e " -a|--alternate\t\tuse alterneate copy method (dd)"
	echo -e " -f|--fs\t\troot filestyem type"
	echo -e " -s|--size\t\tSize of the new sys"
	echo
	echo -e "* Deleting"
	echo -e "$0 -d|--delete[LV] [-u]"
	echo -e " -u|--uninstall\t\tremove grub entry"
	echo
	echo -e "* Backup"
	echo -e "$0 -b|--backup[LV] [-pPATH] [-a]"
	echo -e " -p|--path [PATH]\tsave backup to path/name"
	echo -e " -a|--alternate\t\tuse dd instead of rsync"
	echo
	echo -e "* Restore"
	echo -e "$0 -r|--restore[FILE] [-nNAME] [-s]"
	echo -e " -n|--name [NAME]\tnew name of the sys (DEFAULT: filename)"
	echo -e " -s|--size [SIZE]\tfor tar.gz files, SIZE of the lv must be provided"
	echo -e " -f|--fs\t\troot filestyem type"
	echo
	echo -e "* Listing"
	echo -e "$0 -l|--list ([-v[LV]] [-gSTRING])"
	echo -e " -v|--verbose\t\tList kernel modules - seperated by ',' (DEFAULT: all)"
	echo -e " -g|--grep\t\tRemove lvs with STRING from list"
	echo
	echo -e "* Edit"
	echo -e "$0 -e|--edit[LVs] -n[NAME] [-xFILE] [-tFILE/DIR] [-gSTRING]"
	echo -e " -x|--remove\t\tRemove files from given lvs"
	echo -e " -t|--touch\t\tTouch files/replace directories"
	echo -e " -n|--name\t\tRename lv to given name"
	echo -e " -g|--grep\t\tRemove lvs with STRING from list"
}

get_actual_lv(){
	local value
	value=" $(cat /proc/cmdline) "
	value="${value##* lvm=}"
	value="${value%% *}"
	[ "$value" != "" ] && echo "$value"
}

# check mode
set_mode(){ if [ -z ${MODE} ]; then MODE="$1"; else echo "Mode ${MODE} already used. Exiting!"; exit 1; fi }

# start here
# check for args
if [ $# -lt 1 ]; then usage; exit; fi

# foo = no argument
# foo: = must have a argument
# foo:: = argument is optional
OPTS=`getopt -o hc::d:b::r:le:n:iuas:p:f:v::x:t:g: --long help,clone::,delete:,backup::,restore:,list,edit:,name:install,uninstall,alternate,size:,path:,fs:,verbose::,remove:,touch:,grep: -n 'sysed' -- "$@"`
eval set -- "$OPTS"

# extract options
while true ; do
	case "$1" in
		# help
		-h|--help) usage ; shift ;;
		# modes
		-c|--clone)
			set_mode "clone"
			case "$2" in
				"") LV="$(get_actual_lv)" ; shift 2 ;;
				*) LV="${2##*/}" ; shift 2 ;;
			esac ;;
		-d|--delete)
			set_mode "delete"
			case "$2" in
				"") shift 2 ;;
				*) LV="${2##*/}" ; shift 2 ;;
			esac ;;
		-b|--backup)
			set_mode "backup"
			case "$2" in
				"") LV="$(get_actual_lv)" ; shift 2 ;;
				*) LV="${2##*/}" ; shift 2 ;;
			esac ;;
		-r|--restore)
			set_mode "restore"
			case "$2" in
				"") shift 2 ;;
				*)
					RESTORE_FILE="${2}"
					RESTORE_NAME="$(echo ${2##*/})"
					FEXT1=${RESTORE_NAME#*.}	# *.tar.gz
					FEXT2=${RESTORE_NAME##*.}	# *.gz/tgz
					RESTORE_NAME="$(echo ${RESTORE_NAME%%.*})"
					shift 2 ;;
			esac ;;
		-e|--edit)
			set_mode "edit"
			case "$2" in
				"") shift 2 ;;
				*) LV="${2##*/}" ; shift 2 ;;
				#*) EDIT_FILE="${2}"; shift 2 ;;
			esac ;;
		-l|--list) set_mode "list" ; shift ;;
#		-m|--modules)
#			set_mode "modules"
#			case "$2" in
#				"") MODULES="/lib/modules/$(uname -r)"; shift 2 ;;
#				*) MODULES="${2}" ; shift 2 ;;
#			esac ;;
		# options
		-i|--install) INSTALL_GRUB=1 ; shift ;;
		-u|--uninstall) UNINSTALL_GRUB=1 ; shift ;;
		-a|--alternate) USE_ALTERNATE=1; shift ;;
		-x|--remove)
			DELETE_FILE=1
			case "$2" in
				"") shift 2 ;;
				*) EDIT_FILE="${2}"; shift 2 ;;
			esac ;;
		-t|--touch)
			UPDATE_FILE=1
			case "$2" in
				"") shift 2 ;;
				*) EDIT_FILE="${2}"; shift 2 ;;
			esac ;;
		-s|--size)
			case "$2" in
				"") shift 2 ;;
				*) SIZE="${2}" ; shift 2 ;;
			esac ;;
		-f|--fs)
			case "$2" in
				"") shift 2 ;;
				*) FS="${2}" ; shift 2 ;;
			esac ;;
		-g|--grep)
			case "$2" in
				"") shift 2 ;;
				*) LV_FILTER="${LV_FILTER}|$2"; shift 2;;
			esac ;;
		-p|--path)
			case "$2" in
				"") shift 2 ;;
				*)
					[ -z ${2##*/} ] && SAVE_NAME="$(get_actual_lv)" || SAVE_NAME="${2##*/}"
					[ -d ${2%/*} ] && SAVE_PATH="${2%/*}" || SAVE_PATH=`pwd`
					shift 2 ;;
			esac ;;
		-v|--verbose)
			VERBOSE_OUTPUT=1
			case "$2" in
				"") LIST_MODULES="all"; shift 2 ;;
				*) LIST_MODULES="${2}"; shift 2 ;;
			esac ;;
		# provide a name for a new sys
		-n|--name)
			USE_NAME=1
			case "$2" in
				"") shift 2 ;;
				*) NAME=`echo $2|tr ' ' '_'|tr '[:upper:]' '[:lower:]'` ; shift 2 ;;
			esac ;;
		--) shift ; break ;;
		*) echo "Internal error!" ; exit 1 ;;
	esac
done

if [ -z ${MODE} ]; then
	echo "You have to choose a mode"
	exit 1
fi

# test if User tries to use actual running system
test_running_sys() { if [ ${LV} == $(get_actual_lv) ]; then echo "Can't use running system. Exit!"; exit 1; fi }
# test if User has passed a system name
test_lv() { if [ -z ${LV} ]; then echo "No sys given. Exit!"; exit; fi }
# test if User's passed system name exists
test_devlv() { if ! [ -b "${DEVLV}/${LV}" ]; then echo "\"${DEVLV}/${LV}\" not found. Exit!"; exit 1; fi }
# test if User's passed systems name exists
test_devlv_multi() {
	oldifs="${IFS}"
	IFS=","
	for i in ${1}; do
		if ! [ -b "${DEVLV}/${i}" ]; then echo "\"${DEVLV}/${i}\" doesn't exist. Exit!"; exit 1; fi
	done
	IFS=${oldifs}
}
# test if User has passed a name
test_name() { if [ -z ${NAME} ]; then echo "No name given. Exit!"; exit 1; fi }
# test if User's passed name already exists
test_used_name(){ if [ -b "${DEVLV}/${NAME}" ]; then echo "\"${DEVLV}/${NAME}\" already in use. Exit!"; exit 1; fi }
# test if given FS type can be used
test_fs(){
	if ! [ ${FS} == "ext2" ] && ! [ ${FS} == "ext3" ] && ! [ ${FS} == "ext4" ] && ! [ ${FS} == "jfs" ]; then
		echo "\"${FS}\": Invalid fs. Supported are: ext2, ext3, ext4, jfs"
		exit 1
	fi
}
test_filename(){ if [ -e "${1}" ]; then read -p "File exists. Overwrite? (Ctrl-C for cancel!)"; fi }

case "$MODE" in
	list)
		[ "${LIST_MODULES}" == "all" ] && LIST_MODULES=`ls ${DEVLV}| egrep -v "${LV_FILTER}"|tr '\n' ','`

		oldifs="${IFS}"
		IFS=","
		for i in ${LIST_MODULES}; do
			if ! [ -e ${DEVLV}/${i} ]; then echo "${DEVLV}/${i} doesn't exist. Exit!"; exit 1; fi
		done
		IFS=${oldifs}

		mode_list
		;;
	delete)
		test_lv; test_devlv; test_running_sys

		mode_delete
		;;
	clone)
		test_lv; test_devlv; test_name; test_used_name
		#TODO: implement SIZE possibility

		if ! [ -z ${FS} ]; then
			test_fs
		else
			# use fs of the original sys
			FS=`blkid -o value -s TYPE ${DEVLV}/${LV}`
		fi

		mode_clone
		;;
	backup)
		[ -z ${SAVE_PATH} ] && SAVE_PATH=`pwd`
		[ -z ${SAVE_NAME} ] && SAVE_NAME="${LV}"

		if ! [ -d ${SAVE_PATH} ]; then echo "\"${SAVE_PATH}\" doesn't exist. Exit!"; exit 1; fi
		if ! [ -w ${SAVE_PATH} ]; then echo "No write permissions on \"${SAVE_PATH}\". Exit!"; exit 1; fi

		mode_backup
		;;
	restore)
		[ -z ${NAME} ] && NAME="${RESTORE_NAME}"
		test_used_name

		if ! [ -e ${RESTORE_FILE} ]; then echo "File doesn't exsist. Exit!"; exit 1; fi

		if [ "${FEXT1}" == "tar.gz" ] || [ "${FEXT2}" == "tgz" ]; then
			if ! [ -z ${FS} ]; then
				test_fs
			else
				echo "No Filesystem given. Exit!"
				exit 1
			fi
			if [ -z ${SIZE} ]; then
				echo "No Size given. Exit!"
				exit 1
			else
				if ! [ "${SIZE: -1}" == "G" ]; then
					SIZE="${SIZE}G"
				fi
			fi
		elif [ "${FEXT2}" == "gz" ]; then
			CALCULATE_SIZE=1
		else
			echo "You need to provide a .gz, .tgz, or .tar.gz file in order to proceed"
			exit 1
		fi

		mode_restore
		;;
	edit)
		usage_count=$(expr $DELETE_FILE + $UPDATE_FILE + $USE_NAME)
		if [ $usage_count -eq 0 ]; then
			echo "You have to use one option (rename/delete/modify). Exit!"
			exit 1
		elif [ $usage_count -gt 1 ]; then
			echo "You can only use one option. Exit!"
			exit 1
		fi

		test_lv

		if ((USE_NAME)); then
			test_devlv; test_running_sys; test_name; test_used_name

			edit_rename
		else
			# create a list of all lv's if "all" is selected
			[ ${LV} == "all" ] && LV=`ls ${DEVLV}| egrep -v "${LV_FILTER}|$(get_actual_lv)"|tr '\n' ','`
			# never modify running lv
			LV=`echo ${LV}|sed "s/$(get_actual_lv)//g"`
			test_devlv_multi ${LV}

			((UPDATE_FILE)) && if ! [ -e ${EDIT_FILE} ]; then echo "File/dir doesn't exist. Exit!"; exit 1; fi
			edit_modify
		fi
		;;
esac
