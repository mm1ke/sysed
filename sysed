#!/bin/bash

# Filename: sysed
# Autor: Michael Mair-Keimberger (m DOT mairkeimberger AT gmail DOT com)
# Date: 081114

# Copyright (C) 2014  Michael Mair-Keimberger
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Discription:
# sysed - for editing root lvm systems like:
# 	* cloneing
#	* backup/restore
#	* deleting

# TODO:
# sysed
#	- clone with settings size (resize?)
# 	- resize $lv


# programs
LVCREATE="/sbin/lvcreate"
LVREMOVE="/sbin/lvremove"
LVRENAME="/sbin/lvrename"
LVS="/sbin/lvs"

# default vars
VG="vg0"
DEVLV="/dev/${VG}/"
GRUB_CFG="/boot/grub/grub.cfg"
MODE=""
FS=""

# save mode, ask before really delete something
SAVE=1

grub_edit() {
	local mode=$1
	local grub_name=`echo ${NAME}|tr '_' ' '`
	case "$mode" in
		add)
			local grub_kernel=`cat ${GRUB_CFG} | grep ${LV} | cut -d ' ' -f 2`
			echo -e "menuentry '${grub_name}' {\n\tlinux ${grub_kernel} lvm=${NAME}\n\tinitrd /initrd.cpio.gz\n}" >> ${GRUB_CFG}
			;;
		del)
			# insert beginning of removal
			awk -v pat="${LV}" '{a[NR]=$0;}END{for(i=1;i<=NR;i++){if(a[i+1] ~ pat ){print "<!-- BOF CLEAN -->\n"a[i];}else{print a[i];}}}' ${GRUB_CFG} > /tmp/grub.cfg.tmp
			# insert end of removal
			sed -i '/${LV}/{N;N;s/$/\n<!-- EOF CLEAN -->/}' /tmp/grub.cfg.tmp
			# remove entry
			sed -i '/<!-- BOF CLEAN -->/,/<!-- EOF CLEAN -->/d' /tmp/grub.cfg.tmp
			mv /tmp/grub.cfg.tmp /boot/grub/grub.cfg
			;;
	esac
}

mode_list() {
	echo "Actual Running SYS:"
	get_actual_lv
	echo
	echo "Full list:"
	lvs | egrep -i -v "sys|LV"
}

mode_backup() {
	local snapshotsize=10G
	# create snapshot
	${LVCREATE} --size ${snapshotsize} --snapshot --name ${LV}-snapshot "${DEVLV}/${LV}"
	echo -n "Compressing..."
	dd if=${DEVLV}/${LV}-snapshot bs=4k conv=sync,noerror 2>/dev/null | pigz -c > ${SAVE_PATH}/${SAVE_NAME}.gz
	# delete snapshot
	${LVREMOVE} --force ${DEVLV}/${LV}-snapshot
}

mode_restore() {
	echo -n "Determine original lv size... "
	local new_lv_size=`pigz -lt ${RESTORE_FILE} | grep ${RESTORE_NAME} | cut -d' ' -f 2`
	echo "${new_lv_size}b"
	${LVCREATE} --size ${new_lv_size}b --name "${NAME}" "${VG}"
	echo -n "Restoring..."
	pigz -d ${RESTORE_FILE} | dd of="${DEVLV}/${NAME}"
}

mode_delete() {
	if ((${SAVE})); then
		echo "*** WARNING ***"
		if ((${UNINSTALL_GRUB})); then
			echo "Following Grub Entry will be removed:"
			echo
			if ! `cat ${GRUB_CFG} |grep ${LV} > /dev/null`; then
				echo "No Grub Entry found! Nothing gonna be removed!"
				UNINSTALL_GRUB=0
			else
				cat ${GRUB_CFG} | grep -A2 -B1 ${LV}
			fi
		fi
		${LVREMOVE} "${DEVLV}/${LV}"
		(($?)) && exit 1
	else
		${LVREMOVE} --force "${DEVLV}/${LV}"
	fi

	((${UNINSTALL_GRUB})) && grub_edit del
}

mode_rename() {
	${LVRENAME} "${DEVLV}/${LV}" "${DEVLV}/${NAME}"
	sed -i "s/${LV}/${NAME}/g" ${GRUB_CFG}	
}

mode_clone() {
	local snapshotsize=10G
	local copy_size=`${LVS} ${DEVLV}/${LV} -o LV_SIZE --noheadings --units b --nosuffix`

	# create new lv
	${LVCREATE} --size ${copy_size}b --name "${NAME}" "${VG}"
	
	 # create snapshot
	${LVCREATE} --size ${snapshotsize} --snapshot --name ${LV}-snapshot "${DEVLV}/${LV}"
	echo "Copy..."
	if ((${USE_DD})); then
		dd if=${DEVLV}/${LV}-snapshot bs=4k conv=sync,noerror of=${DEVLV}/${NAME}
	else
		# default: use original fs
		mkfs -t ${FS} -q ${DEVLV}/${NAME}

		local lv_org="/tmp/$RANDOM"
		local lv_copy="/tmp/$RANDOM"
		mkdir -p ${lv_org} ${lv_copy}

		mount -o ro ${DEVLV}/${LV}-snapshot ${lv_org}
		mount ${DEVLV}/${NAME} ${lv_copy}

		rsync -aAX --info=progress2 --exclude={"/tmp/*","/lost+found","/usr/portage/*"} /${lv_org}/* /${lv_copy}/
		mkdir -p ${lv_copy}/usr/portage/{distfiles,packages}

		umount ${lv_copy}
		umount ${lv_org}

		rm -rf ${lv_org} ${lv_copy}
	fi
	# delete snapshot
	${LVREMOVE} --force "${DEVLV}/${LV}-snapshot"

	((${INSTALL_GRUB})) && grub_edit add
}

usage() {
	echo -e "\t$0 -c|--clone[LV] [-i] [-a] [-fFILESYSTEM] [-nNAME]"
	echo -e "\t$0 -d|--delete[LV] [-u]"
	echo -e "\t$0 -r|--rename[LV] [-nNAME]"
	echo -e "\t$0 -b|--backup[LV] [-pPATH]"
	echo -e "\t$0 -w|--restore[FILE] [-nNAME]"
	echo -e "\t$0 -l|--list"
	echo 
	echo "Clone Options:"
	echo -e " -n|--name [NAME]\tname of the new sys (REQUIRED)"
	echo -e " -i|--install\t\tcreate grub entry"
	echo -e " -f|--fs\t\troot filestyem type"
	echo -e " -a|--alternate\t\tuse alterneate copy method (dd)"
	echo 
	echo "Delete Options:"
	echo -e " -u|--uninstall\t\tremove grub entry"
	echo
	echo "Rename Options:"
	echo -e " -n|--name [NAME]\tnew name of the sys (REQUIRED)"
	echo
	echo "Backup Options"
	echo -e " -p|--path [PATH]\tsave backup to path/name"
	echo
	echo "Restore Options"
	echo -e " -n|--name [NAME]\tnew name of the sys (DEFAULT: filename)"
}


get_actual_lv() {
        local value
        value=" $(cat /proc/cmdline) "
        value="${value##* lvm=}"
        value="${value%% *}"
        [ "$value" != "" ] && echo "$value"
}

set_mode(){
	if [ -z ${MODE} ]; then
		MODE="$1"
	else
		echo "Mode ${MODE} already used. Exiting!"
		exit 1
	fi
}

# start here
if [ $# -lt 1 ]; then
	usage
	exit
fi

OPTS=`getopt -o hc::d:liuaf:n:r:b::p:w: --long help,clone::,delete:,list,install,uninstall,alternate,fs:,name:,rename:,backup::,path:,restore: -n 'sysed' -- "$@"`
eval set -- "$OPTS"

# extract options
while true ; do
	case "$1" in
		# help
		-h|--help) usage ; shift ;;
		# modes 
		-c|--clone) 
			set_mode "clone"
			case "$2" in
				"") LV="$(get_actual_lv)" ; shift 2 ;;
				*) LV="${2##*/}" ; shift 2 ;;
			esac ;;
		-b|--backup) 
			set_mode "backup"
			case "$2" in
				"") LV="$(get_actual_lv)" ; shift 2 ;;
				*) LV="${2##*/}" ; shift 2 ;;
			esac ;;
		-d|--delete) 
			set_mode "delete" 
			case "$2" in
				"") shift 2 ;;
				*) LV="${2##*/}" ; shift 2 ;;
			esac ;;
		-l|--list) set_mode "list" ; shift ;;
		-r|--rename)
			set_mode "rename"
			case "$2" in
				"") shift 2 ;;
				*) LV="${2##*/}" ; shift 2 ;;
			esac ;;
		-w|--restore) 
			set_mode "restore" 
			case "$2" in
				"") shift 2 ;;
				*) 
					RESTORE_FILE="${2}" 
					RESTORE_NAME="$(echo ${2##*/})"
					RESTORE_NAME="$(echo ${RESTORE_NAME%%.*})"
					shift 2 ;;
			esac ;;
		# options
		-i|--install) INSTALL_GRUB=1 ; shift ;;
		-u|--uninstall) UNINSTALL_GRUB=1 ; shift ;;
		-a|--alternate) USE_DD=1; shift ;;
		-f|--fs)
			case "$2" in
				"") shift 2 ;;
				*) FS="${2}" ; shift 2 ;;
			esac ;;
		-p|--path)
			case "$2" in
				"") shift 2 ;;
				*)
					[ -z ${2##*/} ] && SAVE_NAME="$(get_actual_lv)" || SAVE_NAME="${2##*/}"
					[ -d ${2%/*} ] && SAVE_PATH="${2%/*}" || SAVE_PATH=`pwd`
					shift 2 ;;
			esac ;;
		# provide a name for a new sys
		-n|--name)
			case "$2" in
				"") shift 2 ;;
				*) NAME=`echo $2|tr ' ' '_'|tr '[:upper:]' '[:lower:]'` ; shift 2 ;;
			esac ;;
		--) shift ; break ;;
		*) echo "Internal error!" ; exit 1 ;;
	esac
done

if [ -z ${MODE} ]; then
	echo "You have to choose a mode"
	exit 1
fi

case "$MODE" in
	list)
		mode_list
		;;
	delete)
		if [ -z ${LV} ]; then
			echo "No sys given! Exit!"
			exit 1
		elif ! [ -b "${DEVLV}/${LV}" ]; then
			echo "\"${DEVLV}/${LV}\" not found. Exit!"
			exit 1
		elif [ ${LV} == $(get_actual_lv) ];then
			echo "Can't delete running system"
			exit 1
		fi
		mode_delete
		;;
	clone)
		if [ -z ${LV} ]; then
			echo "No sys given! Exit!"
			exit 1
		elif ! [ -b "${DEVLV}/${LV}" ]; then
			echo "\"${DEVLV}/${LV}\" not found. Exit!"
			exit 1
		fi

		if [ -z ${NAME} ]; then
			echo "No name given. Exit!"
			exit 1
		elif [ -b "${DEVLV}/${NAME}" ]; then
			echo "\"${DEVLV}/${LV}\" already in use. Exit!"
			exit 1
		fi
		if ! [ -z ${FS} ]; then
			if ! [ ${FS} == "ext2" ] && ! [ ${FS} == "ext3" ] && ! [ ${FS} == "ext4" ] && ! [ ${FS} == "jfs" ]; then
				echo "\"${FS}\": Invalid fs. Support are: ext2, ext3, ext4, jfs"
				exit 1
			fi
		else
			# use fs of the original sys
			FS=`blkid -o value -s TYPE ${DEVLV}/${LV}`
		fi
		mode_clone
		;;
	rename) 
		if [ -z ${LV} ]; then
			echo "No sys given! Exit!"
			exit 1
		elif ! [ -b "${DEVLV}/${LV}" ]; then
			echo "\"${DEVLV}/${LV}\" not found. Exit!"
			exit 1
		elif [ ${LV} == $(get_actual_lv) ];then
			echo "Can't rename running sys"
			exit 1
		fi

		if [ -z ${NAME} ]; then
			echo "No name given. Exit!"
			exit 1
		elif [ -b "${DEVLV}/${NAME}" ]; then
			echo "\"${DEVLV}/${LV}\" already in use. Exit!"
			exit 1
		fi
		mode_rename
		;;
	backup)
		[ -z ${SAVE_PATH} ] && SAVE_PATH=`pwd`
		[ -z ${SAVE_NAME} ] && SAVE_NAME="${LV}"

		if ! [ -d ${SAVE_PATH} ]; then
			echo "\"${SAVE_PATH}\" doesn't exist. Exit!"
			exit 1
		elif ! [ -w ${SAVE_PATH} ]; then
			echo "No write permissions on \"${SAVE_PATH}\". Exit!"
			exit 1
		elif [ -e "${SAVE_PATH}/${SAVE_NAME}.gz" ]; then
			read -p "File exists. Overwrite? (Ctrl-C for cancel!)"
		fi
		mode_backup
		;;
	restore)
		[ -z ${NAME} ] && NAME="${RESTORE_NAME}"

		if ! [ -e ${RESTORE_FILE} ]; then
			echo "File doesn't exsist. Exit!"
			exit 1
		elif [ -e "${DEVLV}/${NAME}" ]; then
			echo "\"${DEVLV}/${LV}\" already in use. Exit!"
			exit 1
		fi
		mode_restore
		;;
esac
